{"meta":{"title":"Yet Another Blog","subtitle":null,"description":null,"author":"Xinwei Gao","url":"https://if2007.github.io"},"pages":[{"title":"About Me","date":"2018-04-03T13:28:47.000Z","updated":"2018-04-03T13:29:45.881Z","comments":true,"path":"about/index.html","permalink":"https://if2007.github.io/about/index.html","excerpt":"","text":"This is a test page for About MeAbout me page."},{"title":"categories","date":"2018-04-03T13:41:42.000Z","updated":"2018-04-03T13:46:39.075Z","comments":true,"path":"categories/index.html","permalink":"https://if2007.github.io/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2018-04-03T13:15:30.000Z","updated":"2018-04-03T14:48:35.395Z","comments":true,"path":"tags/index.html","permalink":"https://if2007.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Hello World","slug":"hello-world","date":"2018-04-03T11:27:47.326Z","updated":"2018-04-03T15:26:25.343Z","comments":true,"path":"2018/04/03/hello-world/","link":"","permalink":"https://if2007.github.io/2018/04/03/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. $a\\in R_q$ Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231//// PQCgenKAT_kem.c//// Created by Bassham, Lawrence E (Fed) on 8/29/17.// Copyright Â© 2017 Bassham, Lawrence E (Fed). All rights reserved.//#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;#include &lt;ctype.h&gt;#include \"rng.h\"#include \"api.h\"#define MAX_MARKER_LEN 50#define KAT_SUCCESS 0#define KAT_FILE_OPEN_ERROR -1#define KAT_DATA_ERROR -3#define KAT_CRYPTO_FAILURE -4int FindMarker(FILE *infile, const char *marker);int ReadHex(FILE *infile, unsigned char *A, int Length, char *str);void fprintBstr(FILE *fp, char *S, unsigned char *A, unsigned long long L);intmain()&#123; char fn_req[32], fn_rsp[32]; FILE *fp_req, *fp_rsp; unsigned char seed[48]; unsigned char entropy_input[48]; unsigned char ct[CRYPTO_CIPHERTEXTBYTES], ss[CRYPTO_BYTES], ss1[CRYPTO_BYTES]; int count; int done; unsigned char pk[CRYPTO_PUBLICKEYBYTES], sk[CRYPTO_SECRETKEYBYTES]; int ret_val; // Create the REQUEST file sprintf(fn_req, \"PQCkemKAT_%d.req\", CRYPTO_SECRETKEYBYTES); if ( (fp_req = fopen(fn_req, \"w\")) == NULL ) &#123; printf(\"Couldn't open &lt;%s&gt; for write\\n\", fn_req); return KAT_FILE_OPEN_ERROR; &#125; sprintf(fn_rsp, \"PQCkemKAT_%d.rsp\", CRYPTO_SECRETKEYBYTES); if ( (fp_rsp = fopen(fn_rsp, \"w\")) == NULL ) &#123; printf(\"Couldn't open &lt;%s&gt; for write\\n\", fn_rsp); return KAT_FILE_OPEN_ERROR; &#125; for (int i=0; i&lt;48; i++) entropy_input[i] = i + 1; randombytes_init(entropy_input, NULL, 256); for (int i=0; i&lt;100; i++) &#123; fprintf(fp_req, \"count = %d\\n\", i); randombytes(seed, 48); fprintBstr(fp_req, \"seed = \", seed, 48); fprintf(fp_req, \"pk =\\n\"); fprintf(fp_req, \"sk =\\n\"); fprintf(fp_req, \"ct =\\n\"); fprintf(fp_req, \"ss =\\n\\n\"); &#125; fclose(fp_req); //Create the RESPONSE file based on what's in the REQUEST file if ( (fp_req = fopen(fn_req, \"r\")) == NULL ) &#123; printf(\"Couldn't open &lt;%s&gt; for read\\n\", fn_req); return KAT_FILE_OPEN_ERROR; &#125; fprintf(fp_rsp, \"# %s\\n\\n\", CRYPTO_ALGNAME); done = 0; do &#123; if ( FindMarker(fp_req, \"count = \") ) fscanf(fp_req, \"%d\", &amp;count); else &#123; done = 1; break; &#125; fprintf(fp_rsp, \"count = %d\\n\", count); if ( !ReadHex(fp_req, seed, 48, \"seed = \") ) &#123; printf(\"ERROR: unable to read 'seed' from &lt;%s&gt;\\n\", fn_req); return KAT_DATA_ERROR; &#125; fprintBstr(fp_rsp, \"seed = \", seed, 48); randombytes_init(seed, NULL, 256); // Generate the public/private keypair if ( (ret_val = crypto_kem_keypair(pk, sk)) != 0) &#123; printf(\"crypto_kem_keypair returned &lt;%d&gt;\\n\", ret_val); return KAT_CRYPTO_FAILURE; &#125; fprintBstr(fp_rsp, \"pk = \", pk, CRYPTO_PUBLICKEYBYTES); fprintBstr(fp_rsp, \"sk = \", sk, CRYPTO_SECRETKEYBYTES); if ( (ret_val = crypto_kem_enc(ct, ss, pk)) != 0) &#123; printf(\"crypto_kem_enc returned &lt;%d&gt;\\n\", ret_val); return KAT_CRYPTO_FAILURE; &#125; fprintBstr(fp_rsp, \"ct = \", ct, CRYPTO_CIPHERTEXTBYTES); fprintBstr(fp_rsp, \"ss = \", ss, CRYPTO_BYTES); fprintf(fp_rsp, \"\\n\"); if ( (ret_val = crypto_kem_dec(ss1, ct, sk)) != 0) &#123; printf(\"crypto_kem_dec returned &lt;%d&gt;\\n\", ret_val); return KAT_CRYPTO_FAILURE; &#125; if ( memcmp(ss, ss1, CRYPTO_BYTES) ) &#123; printf(\"crypto_kem_dec returned bad 'ss' value\\n\"); return KAT_CRYPTO_FAILURE; &#125; &#125; while ( !done ); fclose(fp_req); fclose(fp_rsp); return KAT_SUCCESS;&#125;//// ALLOW TO READ HEXADECIMAL ENTRY (KEYS, DATA, TEXT, etc.)////// ALLOW TO READ HEXADECIMAL ENTRY (KEYS, DATA, TEXT, etc.)//intFindMarker(FILE *infile, const char *marker)&#123; char line[MAX_MARKER_LEN]; int i, len; int curr_line; len = (int)strlen(marker); if ( len &gt; MAX_MARKER_LEN-1 ) len = MAX_MARKER_LEN-1; for ( i=0; i&lt;len; i++ ) &#123; curr_line = fgetc(infile); line[i] = curr_line; if (curr_line == EOF ) return 0; &#125; line[len] = '\\0'; while ( 1 ) &#123; if ( !strncmp(line, marker, len) ) return 1; for ( i=0; i&lt;len-1; i++ ) line[i] = line[i+1]; curr_line = fgetc(infile); line[len-1] = curr_line; if (curr_line == EOF ) return 0; line[len] = '\\0'; &#125; // shouldn't get here return 0;&#125;//// ALLOW TO READ HEXADECIMAL ENTRY (KEYS, DATA, TEXT, etc.)//intReadHex(FILE *infile, unsigned char *A, int Length, char *str)&#123; int i, ch, started; unsigned char ich; if ( Length == 0 ) &#123; A[0] = 0x00; return 1; &#125; memset(A, 0x00, Length); started = 0; if ( FindMarker(infile, str) ) while ( (ch = fgetc(infile)) != EOF ) &#123; if ( !isxdigit(ch) ) &#123; if ( !started ) &#123; if ( ch == '\\n' ) break; else continue; &#125; else break; &#125; started = 1; if ( (ch &gt;= '0') &amp;&amp; (ch &lt;= '9') ) ich = ch - '0'; else if ( (ch &gt;= 'A') &amp;&amp; (ch &lt;= 'F') ) ich = ch - 'A' + 10; else if ( (ch &gt;= 'a') &amp;&amp; (ch &lt;= 'f') ) ich = ch - 'a' + 10; else // shouldn't ever get here ich = 0; for ( i=0; i&lt;Length-1; i++ ) A[i] = (A[i] &lt;&lt; 4) | (A[i+1] &gt;&gt; 4); A[Length-1] = (A[Length-1] &lt;&lt; 4) | ich; &#125; else return 0; return 1;&#125;voidfprintBstr(FILE *fp, char *S, unsigned char *A, unsigned long long L)&#123; unsigned long long i; fprintf(fp, \"%s\", S); for ( i=0; i&lt;L; i++ ) fprintf(fp, \"%02X\", A[i]); if ( L == 0 ) fprintf(fp, \"00\"); fprintf(fp, \"\\n\");&#125; More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"Cat 1","slug":"Cat-1","permalink":"https://if2007.github.io/categories/Cat-1/"}],"tags":[{"name":"tag1","slug":"tag1","permalink":"https://if2007.github.io/tags/tag1/"},{"name":"tag2","slug":"tag2","permalink":"https://if2007.github.io/tags/tag2/"},{"name":"tag3","slug":"tag3","permalink":"https://if2007.github.io/tags/tag3/"}]}]}