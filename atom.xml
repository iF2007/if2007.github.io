<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yet Another Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://if2007.github.io/"/>
  <updated>2018-04-03T15:26:25.343Z</updated>
  <id>https://if2007.github.io/</id>
  
  <author>
    <name>Xinwei Gao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="https://if2007.github.io/2018/04/03/hello-world/"/>
    <id>https://if2007.github.io/2018/04/03/hello-world/</id>
    <published>2018-04-03T11:27:47.326Z</published>
    <updated>2018-04-03T15:26:25.343Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><p>$a\in R_q$</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  PQCgenKAT_kem.c</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by Bassham, Lawrence E (Fed) on 8/29/17.</span></span><br><span class="line"><span class="comment">//  Copyright © 2017 Bassham, Lawrence E (Fed). All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"rng.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"api.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>MAX_MARKER_LEN50</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KAT_SUCCESS          0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KAT_FILE_OPEN_ERROR -1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KAT_DATA_ERROR      -3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KAT_CRYPTO_FAILURE  -4</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span><span class="title">FindMarker</span><span class="params">(FILE *infile, <span class="keyword">const</span> <span class="keyword">char</span> *marker)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span><span class="title">ReadHex</span><span class="params">(FILE *infile, <span class="keyword">unsigned</span> <span class="keyword">char</span> *A, <span class="keyword">int</span> Length, <span class="keyword">char</span> *str)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span><span class="title">fprintBstr</span><span class="params">(FILE *fp, <span class="keyword">char</span> *S, <span class="keyword">unsigned</span> <span class="keyword">char</span> *A, <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> L)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span></span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">char</span>                fn_req[<span class="number">32</span>], fn_rsp[<span class="number">32</span>];</span><br><span class="line">    FILE                *fp_req, *fp_rsp;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span>       seed[<span class="number">48</span>];</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span>       entropy_input[<span class="number">48</span>];</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span>       ct[CRYPTO_CIPHERTEXTBYTES], ss[CRYPTO_BYTES], ss1[CRYPTO_BYTES];</span><br><span class="line">    <span class="keyword">int</span>                 count;</span><br><span class="line">    <span class="keyword">int</span>                 done;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span>       pk[CRYPTO_PUBLICKEYBYTES], sk[CRYPTO_SECRETKEYBYTES];</span><br><span class="line">    <span class="keyword">int</span>                 ret_val;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Create the REQUEST file</span></span><br><span class="line">    <span class="built_in">sprintf</span>(fn_req, <span class="string">"PQCkemKAT_%d.req"</span>, CRYPTO_SECRETKEYBYTES);</span><br><span class="line">    <span class="keyword">if</span> ( (fp_req = fopen(fn_req, <span class="string">"w"</span>)) == <span class="literal">NULL</span> ) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Couldn't open &lt;%s&gt; for write\n"</span>, fn_req);</span><br><span class="line">        <span class="keyword">return</span> KAT_FILE_OPEN_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sprintf</span>(fn_rsp, <span class="string">"PQCkemKAT_%d.rsp"</span>, CRYPTO_SECRETKEYBYTES);</span><br><span class="line">    <span class="keyword">if</span> ( (fp_rsp = fopen(fn_rsp, <span class="string">"w"</span>)) == <span class="literal">NULL</span> ) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Couldn't open &lt;%s&gt; for write\n"</span>, fn_rsp);</span><br><span class="line">        <span class="keyword">return</span> KAT_FILE_OPEN_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">48</span>; i++)</span><br><span class="line">        entropy_input[i] = i + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    randombytes_init(entropy_input, <span class="literal">NULL</span>, <span class="number">256</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(fp_req, <span class="string">"count = %d\n"</span>, i);</span><br><span class="line">        randombytes(seed, <span class="number">48</span>);</span><br><span class="line">        fprintBstr(fp_req, <span class="string">"seed = "</span>, seed, <span class="number">48</span>);</span><br><span class="line">        <span class="built_in">fprintf</span>(fp_req, <span class="string">"pk =\n"</span>);</span><br><span class="line">        <span class="built_in">fprintf</span>(fp_req, <span class="string">"sk =\n"</span>);</span><br><span class="line">        <span class="built_in">fprintf</span>(fp_req, <span class="string">"ct =\n"</span>);</span><br><span class="line">        <span class="built_in">fprintf</span>(fp_req, <span class="string">"ss =\n\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(fp_req);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//Create the RESPONSE file based on what's in the REQUEST file</span></span><br><span class="line">    <span class="keyword">if</span> ( (fp_req = fopen(fn_req, <span class="string">"r"</span>)) == <span class="literal">NULL</span> ) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Couldn't open &lt;%s&gt; for read\n"</span>, fn_req);</span><br><span class="line">        <span class="keyword">return</span> KAT_FILE_OPEN_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">fprintf</span>(fp_rsp, <span class="string">"# %s\n\n"</span>, CRYPTO_ALGNAME);</span><br><span class="line">    done = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ( FindMarker(fp_req, <span class="string">"count = "</span>) )</span><br><span class="line">            <span class="built_in">fscanf</span>(fp_req, <span class="string">"%d"</span>, &amp;count);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            done = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">fprintf</span>(fp_rsp, <span class="string">"count = %d\n"</span>, count);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> ( !ReadHex(fp_req, seed, <span class="number">48</span>, <span class="string">"seed = "</span>) ) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"ERROR: unable to read 'seed' from &lt;%s&gt;\n"</span>, fn_req);</span><br><span class="line">            <span class="keyword">return</span> KAT_DATA_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line">        fprintBstr(fp_rsp, <span class="string">"seed = "</span>, seed, <span class="number">48</span>);</span><br><span class="line">        </span><br><span class="line">        randombytes_init(seed, <span class="literal">NULL</span>, <span class="number">256</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Generate the public/private keypair</span></span><br><span class="line">        <span class="keyword">if</span> ( (ret_val = crypto_kem_keypair(pk, sk)) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"crypto_kem_keypair returned &lt;%d&gt;\n"</span>, ret_val);</span><br><span class="line">            <span class="keyword">return</span> KAT_CRYPTO_FAILURE;</span><br><span class="line">        &#125;</span><br><span class="line">        fprintBstr(fp_rsp, <span class="string">"pk = "</span>, pk, CRYPTO_PUBLICKEYBYTES);</span><br><span class="line">        fprintBstr(fp_rsp, <span class="string">"sk = "</span>, sk, CRYPTO_SECRETKEYBYTES);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> ( (ret_val = crypto_kem_enc(ct, ss, pk)) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"crypto_kem_enc returned &lt;%d&gt;\n"</span>, ret_val);</span><br><span class="line">            <span class="keyword">return</span> KAT_CRYPTO_FAILURE;</span><br><span class="line">        &#125;</span><br><span class="line">        fprintBstr(fp_rsp, <span class="string">"ct = "</span>, ct, CRYPTO_CIPHERTEXTBYTES);</span><br><span class="line">        fprintBstr(fp_rsp, <span class="string">"ss = "</span>, ss, CRYPTO_BYTES);</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">fprintf</span>(fp_rsp, <span class="string">"\n"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> ( (ret_val = crypto_kem_dec(ss1, ct, sk)) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"crypto_kem_dec returned &lt;%d&gt;\n"</span>, ret_val);</span><br><span class="line">            <span class="keyword">return</span> KAT_CRYPTO_FAILURE;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> ( <span class="built_in">memcmp</span>(ss, ss1, CRYPTO_BYTES) ) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"crypto_kem_dec returned bad 'ss' value\n"</span>);</span><br><span class="line">            <span class="keyword">return</span> KAT_CRYPTO_FAILURE;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">while</span> ( !done );</span><br><span class="line">    </span><br><span class="line">    fclose(fp_req);</span><br><span class="line">    fclose(fp_rsp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> KAT_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// ALLOW TO READ HEXADECIMAL ENTRY (KEYS, DATA, TEXT, etc.)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// ALLOW TO READ HEXADECIMAL ENTRY (KEYS, DATA, TEXT, etc.)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">int</span></span><br><span class="line">FindMarker(FILE *infile, <span class="keyword">const</span> <span class="keyword">char</span> *marker)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span>line[MAX_MARKER_LEN];</span><br><span class="line"><span class="keyword">int</span>i, len;</span><br><span class="line"><span class="keyword">int</span> curr_line;</span><br><span class="line"></span><br><span class="line">len = (<span class="keyword">int</span>)<span class="built_in">strlen</span>(marker);</span><br><span class="line"><span class="keyword">if</span> ( len &gt; MAX_MARKER_LEN<span class="number">-1</span> )</span><br><span class="line">len = MAX_MARKER_LEN<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ( i=<span class="number">0</span>; i&lt;len; i++ )</span><br><span class="line">  &#123;</span><br><span class="line">    curr_line = fgetc(infile);</span><br><span class="line">    line[i] = curr_line;</span><br><span class="line">    <span class="keyword">if</span> (curr_line == EOF )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">line[len] = <span class="string">'\0'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ( <span class="number">1</span> ) &#123;</span><br><span class="line"><span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(line, marker, len) )</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ( i=<span class="number">0</span>; i&lt;len<span class="number">-1</span>; i++ )</span><br><span class="line">line[i] = line[i+<span class="number">1</span>];</span><br><span class="line">curr_line = fgetc(infile);</span><br><span class="line">line[len<span class="number">-1</span>] = curr_line;</span><br><span class="line"><span class="keyword">if</span> (curr_line == EOF )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">line[len] = <span class="string">'\0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// shouldn't get here</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// ALLOW TO READ HEXADECIMAL ENTRY (KEYS, DATA, TEXT, etc.)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">int</span></span><br><span class="line">ReadHex(FILE *infile, <span class="keyword">unsigned</span> <span class="keyword">char</span> *A, <span class="keyword">int</span> Length, <span class="keyword">char</span> *str)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span>i, ch, started;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span>ich;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( Length == <span class="number">0</span> ) &#123;</span><br><span class="line">A[<span class="number">0</span>] = <span class="number">0x00</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(A, <span class="number">0x00</span>, Length);</span><br><span class="line">started = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> ( FindMarker(infile, str) )</span><br><span class="line"><span class="keyword">while</span> ( (ch = fgetc(infile)) != EOF ) &#123;</span><br><span class="line"><span class="keyword">if</span> ( !<span class="built_in">isxdigit</span>(ch) ) &#123;</span><br><span class="line"><span class="keyword">if</span> ( !started ) &#123;</span><br><span class="line"><span class="keyword">if</span> ( ch == <span class="string">'\n'</span> )</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">started = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> ( (ch &gt;= <span class="string">'0'</span>) &amp;&amp; (ch &lt;= <span class="string">'9'</span>) )</span><br><span class="line">ich = ch - <span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( (ch &gt;= <span class="string">'A'</span>) &amp;&amp; (ch &lt;= <span class="string">'F'</span>) )</span><br><span class="line">ich = ch - <span class="string">'A'</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( (ch &gt;= <span class="string">'a'</span>) &amp;&amp; (ch &lt;= <span class="string">'f'</span>) )</span><br><span class="line">ich = ch - <span class="string">'a'</span> + <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="comment">// shouldn't ever get here</span></span><br><span class="line">                ich = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ( i=<span class="number">0</span>; i&lt;Length<span class="number">-1</span>; i++ )</span><br><span class="line">A[i] = (A[i] &lt;&lt; <span class="number">4</span>) | (A[i+<span class="number">1</span>] &gt;&gt; <span class="number">4</span>);</span><br><span class="line">A[Length<span class="number">-1</span>] = (A[Length<span class="number">-1</span>] &lt;&lt; <span class="number">4</span>) | ich;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">fprintBstr(FILE *fp, <span class="keyword">char</span> *S, <span class="keyword">unsigned</span> <span class="keyword">char</span> *A, <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> L)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>  i;</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(fp, <span class="string">"%s"</span>, S);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ( i=<span class="number">0</span>; i&lt;L; i++ )</span><br><span class="line"><span class="built_in">fprintf</span>(fp, <span class="string">"%02X"</span>, A[i]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( L == <span class="number">0</span> )</span><br><span class="line"><span class="built_in">fprintf</span>(fp, <span class="string">"00"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(fp, <span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="Cat 1" scheme="https://if2007.github.io/categories/Cat-1/"/>
    
    
      <category term="tag1" scheme="https://if2007.github.io/tags/tag1/"/>
    
      <category term="tag2" scheme="https://if2007.github.io/tags/tag2/"/>
    
      <category term="tag3" scheme="https://if2007.github.io/tags/tag3/"/>
    
  </entry>
  
</feed>
